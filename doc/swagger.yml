swagger: "2.0"
info:
  description: "
  Webcontroller Relay (Arduino) \n
  https://github.com/1e1/arduino-webcontroller-relay
  "
  version: "1.0.0"
  title: "WebController-Relay"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "2.71828183E0+github@gmail.com"
host: "webrelay.local"
basePath: "/"
schemes:
- "http"

paths:
  /r/{relay_id}:
    get:
      description: "read state"
      produces:
      - "text/plain"
      parameters:
      - in: "path"
        name: "relay_id"
        type: "integer"
        maximum: 127
        minimum: 0
        description: "relay id"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Relay"
  /w/{relay_id}/{state}:
    get:
      description: "write state"
      produces:
      - "text/plain"
      parameters:
      - in: "path"
        name: "relay_id"
        type: "integer"
        maximum: 127
        minimum: 0
        description: "relay id"
        required: true
      - in: "path"
        name: "state"
        type: "integer"
        maximum: 1
        minimum: 0
        description: "targeted state"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Relay"
  /m/{relay_id}/{pin_id}:
    get:
      description: "map a relay to a pin"
      produces:
      - "text/plain"
      parameters:
      - in: "path"
        name: "relay_id"
        type: "integer"
        maximum: 127
        minimum: 0
        description: "relay id"
        required: true
      - in: "path"
        name: "pin_id"
        type: "integer"
        maximum: 63
        minimum: 0
        description: "define on which pin is wired the relay"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Relay"
  /o/{relay_id}:
    get:
      description: "define the relay wired as NO (Normally Opened)"
      produces:
      - "text/plain"
      parameters:
      - in: "path"
        name: "relay_id"
        type: "integer"
        maximum: 127
        minimum: 0
        description: "relay id"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Relay"
  /c/{relay_id}:
    get:
      description: "define the relay wired as NC (Normally Closed)"
      produces:
      - "text/plain"
      parameters:
      - in: "path"
        name: "relay_id"
        type: "integer"
        maximum: 127
        minimum: 0
        description: "relay id"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Relay"
  # optional routes, depending the sketch configuration
  /$:
    get:
      description: "list all relays (if WS_VERBOSE has WS_VERBOSE_LIST)"
      produces:
      - "text/plain"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Relays"
  /!:
    get:
      description: "save configuration: relay NC/NO pin (not the state) (if WS_STORAGE != WS_STORAGE_NONE)"
      produces:
      - "text/plain"
      responses:
        200:
          description: "successful operation"
  /~:
    get:
      description: "soft reset (if WS_ACL_ALLOW has WS_ACL_ALLOW_RESET)"
      produces:
      - "text/plain"
      responses:
        200:
          description: "successful operation"

definitions:
  Relay:
    type: "string"
    pattern: '^[01] \d{1,3} [01] \d{1,3}$'
    description: "{state} {relay_id} {is_nc} {pin_id}"
    example: "1 42 1 13"
  Relays:
    type: "string"
    pattern: '^([01] \d{1,3} [01] \d{1,3}\n)*$'
    description: "({state} {relay_id} {is_nc} {pin_id}\n)*"
    example: |+
      1 42 1 13
      1 3 0 14
      1 4 1 22
      0 6 1 23
