openapi: "3.0.3"

info:
  description: "
  Webcontroller Relay (Arduino) \n
  https://github.com/1e1/arduino-webcontroller-relay
  "
  version: "1.0.0"
  title: "WebController-Relay"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "2.71828183E0+github@gmail.com"

servers:
  - url: "http://webrelay.local:{port}/{basePath}"
    variables:
      port:
        default: "80"
      basePath:
        default: "/"

paths:
  /r/{relay_id}:
    get:
      description: "read state"
      parameters:
        - name: "relay_id"
          in: "path"
          description: "relay id"
          required: true
          schema:
            type: "integer"
            minimum: 0
            maximum: 127
      responses:
        200:
          description: "successful operation"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Relay"
  /w/{relay_id}/{state}:
    get:
      description: "write state"
      parameters:
        - name: "relay_id"
          in: "path"
          description: "relay id"
          required: true
          schema:
            type: "integer"
            minimum: 0
            maximum: 127
        - name: "state"
          in: "path"
          description: "targeted state"
          required: true
          schema:
            type: "integer"
            minimum: 0
            maximum: 1
      responses:
        200:
          description: "successful operation"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Relay"
  /R/{relay_id}:
    get:
      description: "unlock the relay and read state"
      parameters:
        - name: "relay_id"
          in: "path"
          description: "relay id"
          required: true
          schema:
            type: "integer"
            minimum: 0
            maximum: 127
      responses:
        200:
          description: "successful operation"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Relay"
  /W/{relay_id}/{state}:
    get:
      description: "lock the relay and force write state"
      parameters:
        - name: "relay_id"
          in: "path"
          description: "relay id"
          required: true
          schema:
            type: "integer"
            minimum: 0
            maximum: 127
        - name: "state"
          in: "path"
          description: "targeted state"
          required: true
          schema:
            type: "integer"
            minimum: 0
            maximum: 1
      responses:
        200:
          description: "successful operation"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Relay"
  /m/{relay_id}/{pin_id}:
    get:
      description: "map a relay to a pin"
      parameters:
        - name: "relay_id"
          in: "path"
          description: "relay id"
          required: true
          schema:
            type: "integer"
            minimum: 0
            maximum: 127
        - name: "pin_id"
          in: "path"
          description: "define on which pin is wired the relay"
          required: true
          schema:
            type: "integer"
            minimum: 0
            maximum: 63
      responses:
        200:
          description: "successful operation"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Relay"
  /o/{relay_id}:
    get:
      description: "define the relay wired as NO (Normally Opened)"
      parameters:
        - name: "relay_id"
          in: "path"
          description: "relay id"
          required: true
          schema:
            type: "integer"
            minimum: 0
            maximum: 127
      responses:
        200:
          description: "successful operation"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Relay"
  /c/{relay_id}:
    get:
      description: "define the relay wired as NC (Normally Closed)"
      parameters:
        - name: "relay_id"
          in: "path"
          description: "relay id"
          required: true
          schema:
            type: "integer"
            minimum: 0
            maximum: 127
      responses:
        200:
          description: "successful operation"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Relay"
  # optional routes, depending the sketch configuration
  /$:
    get:
      description: "list all relays (if WS_VERBOSE has WS_VERBOSE_LIST)"
      responses:
        200:
          description: "successful operation"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Relays"
  /!:
    get:
      description: "save configuration: relay NC/NO pin (not the state) (if WS_STORAGE != WS_STORAGE_NONE)"
      responses:
        200:
          description: "successful operation"
  /~:
    get:
      description: "soft reset (if WS_ACL_ALLOW has WS_ACL_ALLOW_RESET)"
      responses:
        200:
          description: "successful operation"

  /.:
    get:
      description: "sleep (if WS_ACL_ALLOW has WS_ACL_ALLOW_SLEEP)"
      responses:
        200:
          description: "successful operation"

components:
  responses:
    204:
      description: "no content, usually because the request was lost while the device was waking up"
  schemas:
    Relay:
      type: "string"
      pattern: '^[01] \d{1,3} [01] \d{1,3}$'
      description: "{state} {relay_id} {is_locked} {is_nc} {pin_id}"
      example: "1 42 0 1 13"
    Relays:
      type: "string"
      pattern: '^([01] \d{1,3} [01] [01] \d{1,3}\n)*$'
      description: "({state} {relay_id} {is_locked} {is_nc} {pin_id}\n)*"
      example: |+
        1 42 0 1 13
        1 3 0 0 14
        1 4 1 1 22
        0 6 0 1 23
