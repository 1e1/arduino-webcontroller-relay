swagger: "3.0"

info:
  description: "
  Webcontroller Relay (Arduino) \n
  https://github.com/1e1/arduino-webcontroller-relay
  "
  version: "1.0.0"
  title: "WebController-Relay"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "2.71828183E0+github@gmail.com"

servers:
  - url: "http://webrelay.local:{port}/{basePath}"
    variables:
      port:
        default: "80"
      basePath:
        default: ""

paths:
  /r/{relay_id}:
    get:
      description: "read state"
      produces:
      - "text/plain"
      parameters:
      - in: "path"
        name: "relay_id"
        type: "integer"
        maximum: 127
        minimum: 0
        description: "relay id"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Relay"
  /w/{relay_id}/{state}:
    get:
      description: "write state"
      produces:
      - "text/plain"
      parameters:
      - in: "path"
        name: "relay_id"
        type: "integer"
        maximum: 127
        minimum: 0
        description: "relay id"
        required: true
      - in: "path"
        name: "state"
        type: "integer"
        maximum: 1
        minimum: 0
        description: "targeted state"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Relay"
  /R/{relay_id}:
    get:
      description: "unlock the relay and read state"
      produces:
      - "text/plain"
      parameters:
      - in: "path"
        name: "relay_id"
        type: "integer"
        maximum: 127
        minimum: 0
        description: "relay id"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Relay"
  /W/{relay_id}/{state}:
    get:
      description: "lock the relay and force write state"
      produces:
      - "text/plain"
      parameters:
      - in: "path"
        name: "relay_id"
        type: "integer"
        maximum: 127
        minimum: 0
        description: "relay id"
        required: true
      - in: "path"
        name: "state"
        type: "integer"
        maximum: 1
        minimum: 0
        description: "targeted state"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Relay"
  /m/{relay_id}/{pin_id}:
    get:
      description: "map a relay to a pin"
      produces:
      - "text/plain"
      parameters:
      - in: "path"
        name: "relay_id"
        type: "integer"
        maximum: 127
        minimum: 0
        description: "relay id"
        required: true
      - in: "path"
        name: "pin_id"
        type: "integer"
        maximum: 63
        minimum: 0
        description: "define on which pin is wired the relay"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Relay"
  /c/{relay_id}/{is_nc}:
    get:
      description: "define if the relay wired as NC (Normally Opened)"
      produces:
      - "text/plain"
      parameters:
      - in: "path"
        name: "relay_id"
        type: "integer"
        maximum: 127
        minimum: 0
        description: "relay id"
        required: true
      - in: "path"
        name: "is_nc"
        type: "integer"
        maximum: 1
        minimum: 0
        description: "is the relative relay is wired as NC"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Relay"
  # optional routes, depending the sketch configuration
  /#:
    get:
      description: "count relays (if WS_VERBOSE has WS_VERBOSE_LENGTH)"
      produces:
      - "text/plain"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Count"
  /$:
    get:
      description: "list all relays (if WS_VERBOSE has WS_VERBOSE_LIST)"
      produces:
      - "text/plain"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Relays"
  /!:
    get:
      description: "save configuration: relay NC/NO pin (not the state) (if WS_STORAGE != WS_STORAGE_NONE)"
      produces:
      - "text/plain"
      responses:
        200:
          description: "successful operation"
  /~:
    get:
      description: "soft reset (if WS_ACL_ALLOW has WS_ACL_ALLOW_RESET)"
      produces:
      - "text/plain"
      responses:
        200:
          description: "successful operation"

  /.:
    get:
      description: "sleep (if WS_ACL_ALLOW has WS_ACL_ALLOW_SLEEP)"
      produces:
      - "text/plain"
      responses:
        200:
          description: "successful operation"

  /?:
    get:
      description: "about info"
      produces:
      - "text/plain"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/About"

responses:
  204:
    description: "no content, usually because the request was lost while the device was waking up"

definitions:
  About:
    type: "string"
    pattern: '^[a-f0-9]{40}$'
    description: "scm hash"
    example: "f496ca6a4cde79f8649100d6ba2b13c8fb6440a5"
  Count:
    type: "string"
    pattern: '^\d+$'
    description: "number of relays"
    example: "32"
  Relay:
    type: "string"
    pattern: '^[01] \d{1,3} [01] \d{1,3}$'
    description: "{state} {relay_id} {is_locked} {is_nc} {pin_id}"
    example: "1 42 0 1 13"
  Relays:
    type: "string"
    pattern: '^([01] \d{1,3} [01] [01] \d{1,3}\n)*$'
    description: "({state} {relay_id} {is_locked} {is_nc} {pin_id}\n)*"
    example: |+
      1 42 0 1 13
      1 3 0 0 14
      1 4 1 1 22
      0 6 0 1 23
